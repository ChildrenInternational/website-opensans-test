/* Mixins */

@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// Change element bg color
@mixin bg-color($bg-color) {
    background-color: $bg-color;
    color: $color-white;
}

@mixin rounded-corners ($border-radius) {
    -webkit-border-radius: $border-radius;
    -moz-border-radius: $border-radius;
    border-radius: $border-radius;
}

@mixin bottom-rounded-corners ($border-radius) {
    -webkit-border-bottom-left-radius: $border-radius;
    -moz-border-bottom-left-radius: $border-radius;
    border-bottom-left-radius: $border-radius;
    -webkit-border-bottom-right-radius: $border-radius;
    -moz-border-bottom-right-radius: $border-radius;
    border-bottom-right-radius: $border-radius;
}


// Button Rounded
@mixin button-rounded($button-color) {
    background-color: $button-color;
    @include rounded-corners(3px);
    color: $color-white;
    display: inline-block;
    padding: 5px 20px;
}

// Form Focus Mixin
@mixin form-focus(){
     &:focus{ border: 2px solid $color-green; box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(0, 102, 79, 0.6); }
}



// Classes for bg colors
// make these into individual mixins to avoid add'l classes in markup. @include bg-color includes color:white;
.bg-green-light { @include bg-color($color-green-light);}
.bg-green { @include bg-color($color-green);}
.bg-green-dark {@include bg-color($color-green-dark);}

.bg-green-neon { background-color: $color-green-neon; }

.bg-purple-light {@include bg-color($color-purple-light);}
.bg-purple {@include bg-color($color-purple);}
.bg-purple-dark {@include bg-color($color-purple-dark);}

.bg-orange-light {@include bg-color($color-orange-light);}
.bg-orange {@include bg-color($color-orange);}
.bg-orange-dark {@include bg-color($color-orange-dark);}

.bg-gray {@include bg-color($color-gray);}
.bg-gray-title {@include bg-color($color-gray-title);}
.bg-gray-dark {@include bg-color($color-gray-dark);}

.bg-gray-border { background-color: $color-gray-border; }
.bg-gray-light { background-color: $color-gray-light; }

.bg-white { background-color: $color-white; }
.bg-yellow { background-color: $color-yellow; }

// Add background: cover to bg image
@mixin bg-cover {
    -webkit-background-size: cover;
    -moz-background-size: cover;
    -o-background-size: cover;
    background-size: cover;
    background-position: 50% 50%;
    background-repeat:no-repeat;
}
// Change text color
@mixin white-text {
    color: $color-white;
}
// Text Shadow
@mixin text-shadow {
    text-shadow: 1px 1px 15px #000;
}

// Ease interaction
@mixin ease {
    transition: .3s ease all;
}
@mixin section-arrow {
    height: 35px;
    position: absolute;
    width: 110px;
}
@mixin rotate-down {
    -webkit-transform: rotate(90deg);  /* Chrome, Opera 15+, Safari 3.1+ */
      -ms-transform: rotate(90deg);  /* IE 9 */
          transform: rotate(90deg);  /* Firefox 16+, IE 10+, Opera */
}
@mixin shadow {
    box-shadow: 0px 3px 10px 1px rgba(0,0,0,.1);
}
@mixin vertical-align($position: absolute) {
  position: $position;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

// 3D Transform
@mixin translate3d($x, $y, $z) {
    -webkit-transform: translate3d($x, $y, $z);
    -ms-transform: translate3d($x, $y, $z);
    transform: translate3d($x, $y, $z);
}

// Transitions
// Loops through all arguments and prefixes the ones that need it (in this case only transform)
@function vendor-args($arg, $vendor) {
	$result: ();
	@each $i in $arg {
		@if $i == transform { $result: append($result, #{$vendor}$i); }
		@else { $result: append($result, $i); }
	}
	@return $result;
}

// General vendor mixin
@mixin vendor($property, $args...){
	@each $vendor in ('-webkit-', '-moz-', '-ms-', '-o-', '') {
		$out: null;
		@each $arg in nth($args,1) {
			$out: ($out, vendor-args($arg, $vendor));
		}
		#{$vendor}#{$property}: $out;
	}
}

// General transition mixin
@mixin transitions($args...) {
	@include vendor(transition, $args);
}

/*
  This mixin can be used to set the object-fit:
  @include object-fit(contain);
  or object-fit and object-position:
  @include object-fit(cover, top);
*/
@mixin object-fit($fit: fill, $position: null){
  -o-object-fit: $fit;
     object-fit: $fit;
  @if $position {
	  -o-object-position: $position;
	     object-position: $position;
  	font-family: 'object-fit: #{$fit}; object-position: #{$position}';
  } @else {
  	font-family: 'object-fit: #{$fit}';
  }
}


/// Viewport sized typography with minimum and maximum values
///
/// @author Eduardo Boucas (@eduardoboucas)
///
/// @param {Number}   $responsive  - Viewport-based size
/// @param {Number}   $min         - Minimum font size (px)
/// @param {Number}   $max         - Maximum font size (px)
///                                  (optional)
/// @param {Number}   $fallback    - Fallback for viewport-
///                                  based units (optional)
///
/// @example scss - 5vw font size (with 50px fallback), 
///                 minumum of 35px and maximum of 150px
///  @include responsive-font(5vw, 35px, 150px, 50px);
///
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == 'vh', 'height', 'width');
  $min-breakpoint: $min / $responsive-unitless * 100;
  
  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }
  
  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;
    
    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }
  
  @if $fallback {
    font-size: $fallback;
  }
  
  font-size: $responsive;
}

@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media screen and (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }

  @media screen and (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}



// Old Site SASS Mixins ---------------------------/
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

// Single side border-radius

@mixin vertical-gradient( $from: #000, $to: #FFF, $start:0%, $stop: 100%) {
background: $to; /* Old browsers */ /* IE9 SVG, needs conditional override of 'filter' to 'none' */
background: -moz-linear-gradient(top, $from $start, $to $stop) rgba(255, 255, 255, 0); /* FF3.6+ */
background: -webkit-gradient(linear, left top, left bottom, color-stop($start,$from), color-stop($stop,$to)) rgba(255, 255, 255, 0); /* Chrome,Safari4+ */
background: -webkit-linear-gradient(top, $from $start,$to $stop) rgba(255, 255, 255, 0); /* Chrome10+,Safari5.1+ */
background: -o-linear-gradient(top, $from $start,$to $stop) rgba(255, 255, 255, 0); /* Opera 11.10+ */
background: -ms-linear-gradient(top, $from $start,$to $stop) rgba(255, 255, 255, 0); /* IE10+ */
background: linear-gradient(to bottom, $from $start,$to $stop) rgba(255, 255, 255, 0); /* W3C */
background: $to \9;
}

@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model; // Safari <= 5
     -moz-box-sizing: $box-model; // Firefox <= 19
          box-sizing: $box-model;
}

@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin font-size($sizeValue: 12 ){
  font-size: $sizeValue + px; //fallback for old browsers
  font-size: (0.125 * $sizeValue) + rem;
}

@mixin line-height($heightValue: 12 ){
	line-height: $heightValue + px; //fallback for old browsers
	line-height: (0.125 * $heightValue) + rem;
}


@mixin responsive($width) {
  @if $width == wide-screens {
@media only screen and (min-width: $width-large) { @content; }
  }
  @else if $width == lg-med-screens {
	@media (min-width: $width-min-lgmed) and (max-width: $width-max-lgmed){ @content; }
	}
  @else if $width == medium-screens {
    @media only screen and (max-width: $width-medium) { @content; }
  }
  @else if $width == small-screens {
    @media only screen and (max-width: $width-small) { @content; }
  }
  @else if $width == xsmall-screens {
    @media only screen and (max-width: $width-xsmall) { @content; }
  }
}

@mixin shadow-inset($x, $y, $blur, $color) {
  -webkit-box-shadow: inset $x $y $blur $color;
     -moz-box-shadow: inset $x $y $blur $color;
          box-shadow: inset $x $y $blur $color;
}
@mixin transition($property) {
  -webkit-transition: $property .2s ease;
     -moz-transition: $property .2s ease;
       -o-transition: $property .2s ease;
          transition: $property .2s ease;
}

@mixin svg-bg-badges($name) {
  background-image: url('/DocRoot/1/Img/badges/#{$name}.png'); // IE8 & below
  background-image: url('/DocRoot/1/Img/badges/#{$name}.svg');
  background-color:  transparent;
  background-position:  0 0;
  background-repeat: no-repeat;
}

@mixin svg-bg($name) {
  background-image: url('/DocRoot/1/Img/#{$name}.png'); // IE8 & below
  background-image: url('/DocRoot/1/Img/#{$name}.svg');
  background-color:  transparent;
  background-position:  0 0;
  background-repeat: no-repeat;
}

// site specific mixins ------------------------------------------------- /

@mixin fill-landscape($fill-height){ height:$fill-height; max-width:1000000%}
@mixin fill-portrait{ width:100%;max-width:1000000%}

@mixin post-style ($color, $background) {
  padding:1px 16px; border:0; @include border-radius(4px); text-shadow:none!important; margin:0; color: $color; background: $background; box-shadow: none;font-size:12px;line-height: 20px;
	&:hover, &:focus {
      background: darken($background, 8%);
	  color: $color;
	  @include responsive(medium-screens){border: 1px solid darken($background, 10%); }
   }
	@include responsive(medium-screens){border: 1px solid darken($background, 5%); }
}

@mixin small-gry-text($font-size: 14px){font-size:$font-size; color:$color-gray-title;}

// regular slide in left
@mixin stretchLeft {
    animation-duration: 1.5s;
    animation-name: stretchLeft;
    animation-timing-function: ease-out;
    transform-origin: 100% 0 0;
}
@keyframes stretchLeft {
0% {    transform: scaleX(0.3);}
40% {transform: scaleX(1.02);}
60% {transform: scaleX(0.98);}
80% {transform: scaleX(1.01);}
100% {transform: scaleX(0.98);}
80% {transform: scaleX(1.01);}
100% {transform: scaleX(1);}
}


@mixin pullDown {
    animation-duration: 1.1s;
    animation-name: pullDown;
    animation-timing-function: ease-out;
    transform-origin: 50% 0 0;
}
@keyframes pullDown {
0% {transform: scaleY(0.1);}
40% {transform: scaleY(1.02);}
60% {transform: scaleY(0.98);}
80% {transform: scaleY(1.01);}
100% {transform: scaleY(0.98);}
80% {transform: scaleY(1.01);}
100% {transform: scaleY(1);}
}
